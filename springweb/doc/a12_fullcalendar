# jquery lib를 활용한 ajax 통신 처리
1. 필요한 jquery lib를 다운 받는다.
	fullcanlendar
	webapp\fullcalendar-5.10.2\examples\selectable.html
2. 기본 환경 내용과 파일을 확인 한다.
3. 해당 lib의 doc파일을 확인한다.
4. 스프링으로 초기화면이 나올 수 있도록 공통 파일을 설정한다.
5. 핵심 json 데이터를 확인한다.
6. DB 구조를 확인 하고 처리할 수 있도록 한다.
	- 테이블 만들기
	- 기본 sql 작성하기
7. 데이터 처리를 위한 dao/mapper 설정 처리
8. service/controller 설정..
9. 각 내용별로 업무 내용 처리
	1) 조회하기
	2) 등록하기
	3) 수정하기
	4) 삭제하기
	
# DB 처리하기
	1. json 데이터
		속성 :
		id : 일정아이디
		title : 제목
		start : 시작일
		end : 마지막일
		content : 내용
		color : 배경색상
		textColor : 글자 색상
		allDay : 종일여부
		
		create table calendar(
			id number primary key,
			title varchar2(100),
			start1 varchar2(50),
			end1 varchar2(50),
			content varchar2(500),
			bordercolor varchar2(20),
			backgroundcolor varchar2(20),
			textcolor varchar2(20),
			allday number(1,0)
		);
		create sequence cal_seq
			start with 1
			minvalue 1;
		INSERT INTO calendar values(cal_seq.nextval, '일정등록시작', '2022-03-27', '2022-03-27', '내용', 'navy', 'navy', 'yellow', 1);
		
		class Calendar {
			private int id;
			private String title;
			private String start;
			private String end;
			private String content;
			private String borderColor;
			private String backgroundColor;
			private String textColor;
			private boolean allDay;
		}
		
		A10_FullCalDao.java
			public List<Calendar> getCalendarList();
			CalendarMapper.xml
		A10_FullCalService.java
		
		url
		[
	    	{
	            title: '일정 등록^^',
	            start: '2022-03-02'   			
	    	},
	        {
	          title: 'All Day Event',
	          start: '2022-03-01'
	        },
	        {
	          title: 'Long Event',
	          start: '2022-03-07',
	          end: '2022-03-10'
	        },
	        {
	          groupId: 999,
	          title: 'Repeating Event',
	          start: '2022-03-09T16:00:00'
	        },
	        {
	          groupId: 999,
	          title: 'Repeating Event',
	          start: '2022-03-16T16:00:00'
	        },
	        {
	          title: 'Conference',
	          start: '2022-03-11',
	          end: '2022-03-13'
	        },
	        {
	          title: 'Meeting',
	          start: '2022-03-12T10:30:00',
	          end: '2022-03-12T12:30:00'
	        },
	        {
	          title: 'Lunch',
	          start: '2022-03-12T12:00:00'
	        },
	        {
	          title: 'Meeting',
	          start: '2022-03-12T14:30:00'
	        },
	        {
	          title: 'Happy Hour',
	          start: '2022-03-12T17:30:00'
	        },
	        {
	          title: 'Dinner',
	          start: '2022-03-12T20:00:00'
	        },
	        {
	          title: 'Birthday Party',
	          start: '2022-03-13T07:00:00'
	        },
	        {
	          title: 'Click for Google',
	          url: 'http://google.com/',
	          start: '2022-03-28'
	        }
		]
	2. SQL : SELECT * FROM CALENDAR;
		VO 만들기
		DAO/MAPPER
		SERVICE/CONTROLLER
		
# 일정 등록하기
1. 등록 처리하는 event 확인
2. 등록 처리할 기본 pop창 내용 확인 입력
	'3/1절', '2022-03-01', '2022-03-01', '내용', 'navy', 'pink', 'yellow', 1);
	제목, 등록일/종료일 확인, 내용, 테두리 색상, 배경색상, 글자 색상 지정, 종일여부 지정
3. 등록 처리할 ajax controller 호출
4. DB 처리
	vo
	dao/mapper
5. 등록 처리
	controller : insertCalendar.do
	sql : 
		insert into calendar values(cal_seq.nextval, #{title}, #{start}, #{end}, #{content}, #{borderColor}, #{backgroundColor}, #{textColor}, #{allDay})
	dao : public void insertCalendar(Calendar ins);
	mapper :
	service
	dao
	controller
		등록 후,
		return "redirect:/calendar.do";
6. 일정 클릭시, 상세 내용 보기/수정 삭제 처리
	1) 이벤트핸들러 확인
		- 기능 버튼 정리(show/hide)
	2) 데이터 로딩
		- 핸들러 나온 속성값을 통해서 데이터 확인
		- 속성값을 form하위 요소객체와 연결하여 출력 처리
		- dialogue 로딩
			# 주의 : 입력과 상세화면은 같이 쓸 수 있게 속성값/hidden 구분하여 처리해놓는다.
				- 입력창 로딩시 : 입력버튼만 보이게
				- 상세화면 로딩시 : 수정, 삭제버튼만 보이게 처리
	3) 수정/삭제 처리
		- 버튼 클릭, 수정/삭제 확인
			/updateCalendar.do
			/deleteCalendar.do
			submit() 처리
		- dao
			public void updateCalendar(Calendar upt)
			public void deleteCalendar(int id)
		- service
		- controller
			return "redirect:/calendar.do";
			
# 개발 순서
1. 기본 sample lib을 다운 받는다.
	- webapp 하위에 폴더에서 샘플 화면을 확인
2. jsp 적용을 위해서 필요로 하는 css/js를 공통 폴더로 설정하여 처리한다.
	- web/a00_com/lib 폴더 복사 및 설정
	-
		<link href='$path}'/a00_com/lib/mai.css' rel='stylesheet' />
		<script src='${path}/a00_com/lib/main.js'></script>
	- 사용한 sample @@.html을 확인
3. controller 선언과 함께 환경 설정이 된 jsp 파일로 초기화면을 호출한다.
	//http://localhost:8000/springweb/calendar.do
	@GetMapping("calendar.do")
	public String calendar() {
		return "WEB-INF\\views\\a02_mvc\\a20_fullCalendar.jsp";
	}
4. 사용하게 될 데이터베이스를 확인한다.
	1) sample에서 나온 json 데이터
	2) 사이트에서 지원하는 api 분석
		events : [
			{
				title: '일정 등록^^',
				start: '2022-03-02'
			},
		]
	3) 데이터가 어느정도 정리되었으면 테이블을 만들고, 사용하게될 sql, vo, mapper, dao를 만든다.
5. 초기화면 로딩할 이벤트핸들러를 확인(해당사이트 document 문서 참고)하고, ajax를 통해서 json데이터를 불러오고, 할당한 기능 keyword를 확인하여 처리한다.
	events: function(info, successCallback, failureCallback) {
		//서버에 있는 json 데이터 가져와서, fullcalendar 입력하기
		$.ajax({
			type:"post",
			url:"${path}/calList.do",
			dataType:"json",
			success:function(data) {
				console.log(data.calList)
				successCallback(data.calList);
		});
6. 각종 기능 이벤트를 확인하고, 해당 이벤트에 처리한 화면 ui를 구성한 후, 데이터 로딩 방식을 결정한다.
	1) 등록 처리
		- 등록 이벤트 확인
		- 등록 화면 ui 결정(dialogue box)
			select: function(arg) {}
		- 등록 버튼을 통해 기존에 있는 데이터를 DB에 등록 처리
			form화면 구성과 요청값을 통해서 controller단 호출 처리
			$("[name=start]").val(arg.start.toISOString())
			$("[name=end]").val(arg.end.toISOString())
			$("[name=allDay]").val(""+arg.allDay)
			<button type="button" id="regBtn" class="btn btn-primary">일정등록</button>
			<form id="frm1 class="form" method="post">
				<input type="hidden name="id" value="0"/>
				<div class="row">
					<div class="col">
						<input type="text" class="form-controle" placeholder="제목 입력" name="title">
		- 등록 sql 작성, dao/mapper/service
		- 등록 처리하는 controller 선언
		@RequestMapping("insertCalendar")
		public String insertCalendar(Calendar ins) {
			service.insertCalendar(ins);
			return "redirect:/calendar.do";
		}
		$("#regBtn").click(function() {
			if(confirm("일정등록하시겠습니까?")) {
				$("#frm1").attr("action", "${path}/insertCalendar.do");
				$("#frm1").submit();
			}
		}
		2) 상세확인 수정 삭제
			- 해당 일정 클릭시 처리되는 이벤트 확인
				eventClick, eventDrop, eventResize
			- 처리할 화면 구성 결정(dialogue)
			- form 화면에 로딩데이터 할당
			- 기능 처리를 위한 controller단 호출
			- 기능에 해당하는 sql작성(수정/삭제), dao, mapper, service, controller단 연결 처리