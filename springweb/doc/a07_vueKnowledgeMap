# Vue의 knowledge Map
1. 개발환경 구성
	1) lib 형식 vue
		<script scr="http://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
2. vue의 MVVM 구조 이해하기 및 속성 지정
	1) view
	2) model
	3) view model
3. vue의 기초 문법 사용
	1) 변수 directive
		{{}}, v-text, v-html
	2) 속성 directive
		v-bind : 속성="속성값" : 속성을 모델로 지정할 때, 활용
		:속성="속성값"
	3) 쌍방향 directive
		v-model = "모델명"
	4) 조건문/반복문 directive
		v-show
		v-if, v-else-if, v-else
		v-for = "(단위, index/prop) in 배열/객체"
	5) 기타 디렉티브
		v-once, v-cloak
4. Vue 인스턴스
	1) 주요 속성 : el, data
	2) 메서드형
		computed
		watch
		methods
		라이프사이클 관련 메서드
5. 이벤트 처리
	1) 이벤트 형식
		- @이벤트명="핸들러함수"
		- 인라인
		- methods 속성을 통해 핸들러 함수 정의
	2) 이벤트 처리 코드
		<요소객체 @click="callEvent">
		methods:{
			callEvent:function(){
			}
		}
6. 스타일 처리
	1) 기본 css를 모델데이터와 연동하여 동적인 데이터 처리를 위해서 활용한다.
	2) 기본 형식
		:style="모델명 or {css속성:속성값}
		:class="모델명 or {클래스명:true, ...}
	3) 처리형식
		data:{모델명},
		computed:{함수명:function(){}}
		methods:{함수명:function(){}}
7. 컴포넌트 처리
	0) 기본 형식
		Vue.component("컴포넌트명", {
			속성:속성값
		});
	1) 컴포넌트 기본 구성 요소
		template
		data:function(){
			return "{모델명:모델값}"
		}
		vue인스턴스 사용 기능 메소드와 동일
	2) 계층형 데이터 처리
		props, this.$emit()	
	3) 컴포넌트와 컴포넌트간의 데이터 전송 처리
8. 서버통신(ajax)
	1) jquery
	2) axios
9. vuex를 이용한 상태관리

# vue 컴포넌트 이벤트 함수
1. 주요 변수
	모델 데이터 : data:function(){return {모델명:모델값}}
	함수 : methods:{함수명:function(){처리할 함수 내용}}
	이벤트 : template에서 선언 <요소객체 @이벤트명="함수명">
	화면 (body)에서 호출 방법
		<컴포넌트명></컴포넌트명>
		
2. 개발 순서
	1) 템플릿 정의
		<template id="tmp1">
			<div>
				<h2 @click="fun1">클릭</h2>
				<h3>카운트 : {{cnt}}</h3>
			</div>
		</template>
	2) 컴포넌트 정의
		Vue.component("comp1", {
			template:"#tmp1",
			data:function() {
				return {cnt:0}
			},
			methods:{
				fun1:function(){
					this.cnt = parseInt(this.cnt)+1;
				}
			}
		});
	3) 화면
		<comp1></comp1>
		
# 이벤트 bus
1. 이벤트에 의한 상위로 데이터 전달은 컴포넌트 레벨이 2계층 이상이고 ,여러 컴포넌트를 화면에서 사용할 때는 복잡성이 너무 많이 발생하게 된다.
2. 이 때, eventBus라는 개념을 이용해서 상위에 전달할 데이터나 이벤트를 이벤트 버스라는 공통 메모리를 설정하여 사용하면,
3. 이벤트버스에 이벤트와 매개변수를 통해 저장하면, 필요로 하는 컴포넌트에서 해당 이벤트와 매개변수를 $.on("이벤트명", 처리할함수) 형태로 지정하여, 처리함으로 효과적으로 이벤트와 데이터를 처리할 수 있다.