# 스프링 환경하에 채팅 처리
0. websockey 통신에 대한 이해
	1) 특징
		web환경에서 서버와 클라이언트 간에 메시지(데이터)를 push 방식으로 처리하는 것을 말한다.
		일반적으로 웹프로그램에서는 특정한 이벤트(submit)등에 의해 데이터를 서버에 전달했지만,
		push 방식으로 특정 이벤트에 의해 서버로 전달하지만, 서버에서 적극적으로 client에 데이터를 전달하는 것을 말한다.
	2) 주요 방식
		client vs server
		client는 웹 소켓 서버에 데이터를 능동적으로 전달할 뿐아니라, 수동적으로 서버에서 오는 데이터를 받을 수 있다.
			주로 js에 의해 처리된다.
		server는 client에서 오는 데이터를 받아서, 이 서버와 연결된 클라이언트들에게 로직이나 조건에 있어 전부 또는 일부로 선택하여 데이터를 전송할 수 있다.
		
1. 기본 개발 환경 구성
	1) lib 확인 : 필요로 하는 웹 소켓 통신 jar을 확인
	2) 컨테이너에서 websocket 통신 서버를 설정하는 객체를 선언하여 등록한다.
		핸들러명과, client에서 핸들러를 호출하는 url 패턴도 함께 선언한다.
2. 채팅 처리 프로세스
	1) [front단]채팅을 처리하는 초기 화면을 로딩하고,
	2) [front단]채팅을 하는 id를 입력하여, 채팅 서버에 접속을 한다.
	3) [backend단]위 요청에 의해 id를 받아서 채팅 서버에 접속자로 등록한다.
	4) [front단]메시지를 입력하고 전달한다.
	5) [backend단]클라이언트단에서 메시지로 보내 내용을 받아서 websocket 서버에 접속한 사용자의 전부 또는 일부에 메시지를 전달한다.
	6) [front단]서버로 통해 전달받은 메시지를 홤녀에 특정한 부분에 출력한다.
	7) [front단]받은 메시지의 내용을 화면에 적절하게 표시하거나 브라우저단에 저장(쿠키나, 로컬스토리지)할 수 있다.
3. 실제 개발 순서
	1) 소켓 통신을 위한 핸들러 클래스 선언
	2) 컨테이너에 소켓통신을 위한 선언된 핸들러 클래스를 호출하는 url 설정과 기본적인 소켓 api 객체 선언
	3) 채팅을 위한 초기 화면 구성
		- controller
		- view단(기본적인 채팅을 위한 사용자 화면 구성)
	4) 서버 접속과 핸들러 클래스와 연결되는 이벤트 메서드 선언(js)
		- 아이디 입력 후, 접속 버튼 클릭시 socket 클라이언트 객체를 통해 서버에 접속하게 처리
		- 각 기능적 단계별로 처리한 내용을 핸들러 메서드를 통해서 코드
			접속시
			메시지전송시
			접속종료시
		- 입력창의 적절한 이벤트 처리와 메시지 출력에 대한 autoscrolling 처리