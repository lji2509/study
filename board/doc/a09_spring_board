# 답변형 게시판
1. 주요 기능
	0) 로그인 통해서 session 처리
	1) 등록된 게시물 리스트
		- 조회 : 작성자/제목(조회항목), 제목, 작성자, 등록일, 조회수(리스트)
			- 최근글 표시(new)
		- 페이지 처리 : 한 화면에서 보일 수 있는 게시물 설정
			하단에 페이징 리스트 처리
	2) 글등록 : 제목, 작성자(session id), 내용, 첨부파일, (등록일, 수정일, 조회수)
	3) 글상세 : 제목, 작성자, 등록일, 수정일, 조회수, 내용, 첨부파일
			기능버튼 : 수정, 삭제, 답글(등록자만이 수정/삭제 가능하게 처리)
	4) 답글화면 : 답글 클릭시, 제목:RE:, 내용:이전글 내용 표시하여, 답글을 등록할 수 있게 처리 화면(글등록 화면을 활용)
			
2. 개발 순서(전체)
	1) DB 설계
		메인 게시판 테이블
			create table board(
				no number primary key,
				refno number,
				title varchar2(100),
				writer varchar2(100),
				content varchar2(2000),
				regdte date,
				uptdte date,
				readcnt number
			);
		첨부파일 테이블
		참고(member-아이디, 패스워드, 이름, 권한, 포인트)
		board sequence
			create sequence board_seq
				start with 1
				minvalue 1;
		- 화면 개발 순서별 sql작성과 vo작성
			insert into board values(board_seq.nextval, 0, '초기화면', '홍길동', '내용', sysdate, sysdate, 0);
			insert into fileInfo values(#{fno}, #{pathinfo}, #{fname}, sysdate, sysdate, #{etc})
	2) 초기 리스트 메인화면
		- 기본 sql : 
			select *
			from board
			where writer like '%%' and title like '%%'
			order by no desc;
		- vo : 리스트와 조회 Board.java
		- dao/mapper
			public List<Board> getBoardList(Board sch);
		- service/controller
		- controller - 게시판 전체 controller url : /board.do
			각 기능별 메서드 method=list, method=insertFrm, method=insert, method=detail, method=update, method=delete
			// http://localhost:8000/springweb/board.do?method=list
			public String boardList(Board sch, Model d) {
				d.addAttribute("boardList, service.getBoardList(sch))
				return "";
			}
		- view(jsp)
			- 조회 form 화면 구성
			- 데이터 리스트 테이블 구성
				<c:forEach var="board" items="${boardList}">
			
	3) 등록 처리
		- 기본 처리 프로세스
			등록 버튼 클릭시, 컨트롤러 호출(등록화면), 등록 화면 로딩
			데이터 입력, 파일 첨부
			등록 컨트롤러 호출
			서비스, dao(게시판등록, 첨부파일정보등록)
			등록완료 메시지 보이기
		- 등록 개발 순서
			사용할 sql, : board, 파일정보 DB
			dto(데이터 전송 관련) vo 확인
			dao/mapper 작성
			a01_boardList.jsp
				1) 등록 버튼 클릭시, 등록하시겠습니까? confirm
					location.href="${path}/board/board.do?method=insertFrm";
			service/controller
				method=insert
				/board/board.do?method=insertFrm
					a02_boardInsert.jsp 등록 화면 호출
				/board/board.do?method=insert
					등록 msg 모델로 설정
			화면처리(jsp) a02_boardInsert.jsp
				기본데이터 입력 name : 제목, 내용, 작성자(추후 session)
				첨부파일에 대한 내용
				form 속성
				필수항목 check 후, submit 클릭시,
					/board/board.do?method=insert 호출
			등록 처리 후, script 처리
				등록했습니다. 계속하시겠습니까?
				
# 첨부파일 처리
0. 컨테이너 : 파일업로드 뷰와 다운로드 뷰 bean으로 선언

1. 뷰단
	form enctype="multipart/form-data
	
2. VO 요청값으로 파일을 처리할 수 있게
	MultipartFile 객체 선언
	
3. service단
	1) 파일 업로드 처리
		경로명(설정), 파일명
		File 객체 생성
		MultiPartFile ==> File로 전환
		문제 발생시, 메시지를 리턴하여 예외처리
	2) 첨부파일 처리 데이터 입력
		dao의 첨부파일 처리
		
4. 다중 파일 첨부를 위한 개발
	1) Vo MultiPartFile[] 선언
	2) 화면 ui를 동적으로 파일 첨부를 하게 처리
	3) service 안에 여러 개 파일이 등록 반복
		- upload
		- dao

# 게시판 상세 내용 리스트 및 파일다운로드 처리
0. 주요파일 및 VO
	BoardController.java
		상세화면 @RequestMapping(params="method=detail")
	BoardDao.java
		public Board getBoard(int empno);
	BoardMapper.xml
		\views\a01_boardList.jsp
		\views\a03_boardDetail.jsp
		
1. 처리 프로세스
	1) 리스트 화면에서 리스트 데이터 더블 클릭시, empno를 요청값에 넘기면서 controller 호출
	2) 컨트롤러 호출되어 service, dao, mapper를 호출하여 empno 값 을 넘겨 단일 데이터를 가져오고,
		- 데이터 정보 가져오기
		- 파일 정보 가져오기
	3) 컨트롤러에 모델 데이터로 Board정보와 파일명에 정보를 설정 처리
	4) 화면에 상세 정보를 가져와서 출력한다.
	
2. 개발순서
	0) controller 선언
		@RequestMapping(params="method=detail")
		int no 요청값을 가져와서 
		\views\a03_boardDetail.jsp 생성하여, 상세화면에 no가 출력되게 처리
	1) 리스트 화면에서 controller 호출
		location.href="${path}/board.do?method=detail&no="+no
	2) dao, mapper
		sql = select * from board where no = ?
			  select * from fileinfo where fno = ?
		public Board getBoard(int no);
		public FileInfo getFileInfo(int fno);
	3) service, dao
	4) controller
		d.addAttribute("board", service.getBoard(no));
		d.addAttribute("file", service.getFileInfo(no));
	5) view
		<input name="no" value="${board.no}"/>
		<input name="title" value="${board.title}"/>
		
# 삭제
1. 프로세스
	1) 삭제 클릭시
	2) 삭제 컨트롤러 호출
	3) service ==> dao ==> mapper
	4) 컨트롤러
		모델 데이터 삭제완료
	5) 화면단 삭제완료 msg표현
	
2. 개발순서
	1) controller
		method=del
		int no
	1) 삭제버튼 클릭 a03_boardDetail.jsp
		location.href="${path}/board.do?method=del&no="+$("[name=no]").val();
	2) controller
		번호 확인
	3) 화면에서
		var msg = "${msg}"
		if(msg != "") {
			alert(msg+"\n조회화면 이동")
			location.href="${path}/board.do?method=list";
		}
	4) sql : delete from board where no=#{no}
	5) dao/mapper
		public void deleteBoard(int no)
	6) service ==> controller
	
# 세션로그인 처리 및 권한에 따른 기능 처리
1. 주요기능
	1) 초기화면에 session값이 없으면 로그인 처리
	2) 로그인으로 DB에 사용자 정보 불러와서 session 값으로 설정
		- 로그인 실패시, 다시 인증 과정 거치게 처리
	3) 글등록시, 등록자를 session의 id값으로 자동 설정
	4) 글 수정/삭제 버튼 클릭시, 현재 session과 작성자의 값을 비교하여 등록자일 때만 수정/삭제 가능하게 처리
2. 프로세스 순서
	1) controller list 화면 호출
	2) view단에서 session값 (member.id)가 없으면, 로그인 하겠습니다. 표시면 로그인 팝업창(dialogue) 로딩
	3) 아이디 패스워드 입력 로그인 버튼 클릭
	4) 로그인 controller 호출
		id, pass로 DB확인, 있으면 msg로 로그인 성공 및 session값 설정
		없으면, 로그인 실패 list 화면 들어가서 login 다이얼로그 박스 로딩
	5) 로그인 성공하면, 상단에 @@ 로그인 중 표기
	6) 등록시, 작성자 자동으로 로그인 아이디값 입력
	7) 수정/삭제 버튼 클릭시, 현재 로그인 session 아이디와 같은지 여부를 확인해서 권한 있는지 alert() 로딩
3. 개발 순서(A07_SessionController.java 참고)
	1) controller단 session 처리 - sessionattribute, modelattribute
		@SessionAttributes("member")
		@ModelAttribute("member")
		public Member getmember() {
			return new Member();
		}
	2) controller단 로그인 처리 url mapping 메서드 선언
		@RequestMapping(params="method=login")
		public String login(@ModelAttribute("member") Member member, Model d) {
			d.addAttribute("loginMsg", "로그인 성공");
			return "forward:/board.do?method=list";
		}	
		- 로그인성공/실패에 따른 msg 모델 처리
	3) jsp(list)
		- session값 있는 여부에 따른 메시지 처리(js)
		- 로그인 성공 여부에 따른 loginMsg 메시지 처리(js)
			실패시는 다시 로그인 dialogue 박스 로딩 처리
		var loginMsg="${loginMsg}";
		if(loginMsg!=""){
			alert(loginMsg)
		}
		// login 후 session이 있을 때..
		var hasSession="${member.id}";
		console.log(hasSession);
		if(hasSession==""){ // session값이 없을 때..
			alert("로그인이 필요합니다!");
			$("#loginBtn").click(); //다이얼로그 박스 로딩
		}
  		<p align="right">
  			<c:if test="${not empty member.id}">
  			${member.id} 로그인중<br>
  		</c:if>					
		<form id="frm02" class="form" action="${path}/board.do?method=login" method="post">
		
        <button type="button" id="login"  class="btn btn-primary">로그인</button>
        <script>
        	$("#login").click(function(){ 
        		$("#frm02").submit();
        	});
        </script>				
	4) 데이터베이스 처리
		- db설계 및 sql 작성
			member테이블 확인 및 작성
			select * from member where id=#{id} and pass=#{pass}
		- vo 작성
			Member
				private String id;
				private String pass;
				private String name;
				private String auth;
				private int point;
		- dao/mapper 작성
			public List<Member> login(Member login);
		- service/controller 호출
		- controller에 모델 데이터 설정
			Member m = service.login(member);
			if(m!=null) {
				//로그인 성공
				m.addAttribute("member", service.login(member));
			} else {
				d.addAttribute("loginMsg", "로그인 실패");
			}
			return "forward:/board.do?method=list";
		- 화면단에 member.id ==> member.name
		
# 게시판 수정 처리
0. 주요 파일 및 코드
	BoardController.java(컨트롤단)
		@RequestMapping(params="method=update")
	a03_boardDetail.jsp(뷰)
		$("#uptBtn").click(function() {
		
		});
1. 주요 프로세스
	1) 상세화면에서 수정 버튼을 클릭
	2) session과 작성자의 값이 같은지 여부 확인 수정 권한 확인
	3) form의 action을 수정 url로 변경 및 submit()
	4) 컨트롤러 : 수정 url에서 요청값으로 Board로 받아 service ==> dao ==> Mapper 넘겨주고, 정상 수정 메시지 모델 데이터 처리
	5) 화면단, js 수정 메시지 출력 및 조회화면 이동 여부를 확인 메시지
2. 개발 순서
	1) controller 수정 url 만들기, 메시지 처리
		@ReqeustMapping(params="method=update")
		public String updateBoard(Board upt, Model d) {
			d.addAttribute("msg", "수정완료");
		}
	2) view단 : 수정 버튼 click 이벤트 요청값 처리, submit 처리
		name="regdte" name="uptdte" 삭제 : DB에서 처리(에러발생)
		권한 확인
		$("#uptBtn").click(function() {
			if(sessId != ${"[name=writer]").val()) {
				alert("수정 권한이 없습니다");
			} else {
				if(confirm("수정하시겠습니까?)) {
					$("form").attr("action", "${path}/board.do?method=update");

					$("form").submit();
				}
			}
		});
	3) DB 처리
		sql : update board
			set title = #{title}
			...
			where no = #{no}
		vo
		dao : public void updateBoard(Board upt);
		mapper
	4) service  ==> controller 호출
	
# 답글 처리하기
1. 처리프로세스
	상세화면에 답글을 클릭하면
	현재 글번호는 답글 화면에 refno
	제목은 RE:현재글제목
	내용은 
		하단에 표기하는 형식으로
	답글 form으로 이동이 되고,
	저장을 클릭시 답글이 아래의 데이터와 같이 저장되게 처리하는 것이다.
		insert into board(board_seq.nextval, 이전글no, 'RE:이전글', '답글등록 \n\n이전글', 0, sysdate, sysdate);
		no	refno
		1	0
		2	0
		3	1 : 답글인 경우, refno에 상위 글에 대한 글번호가 입력된다.
		4	3 : 계층적으로 데이터가 입력이 된다.
2. 개발 순서
	0) 개발 소스 : BoardController.java @RequestMapping(params="method=inserFrm")
		views\a03_boardDetail.jsp
		\views\a02_boardInsert.jsp
	1) 답글 클릭시, 등록 화면 호출
		요청값으로 기본 등록 화면에
		<input name="refno" value="${board.no}"/>
		<input name="title" value="RE:${board.title}"/>
		형식으로 전송되게 한다.
	2) 등록 처리
	3) 데이터 계층형으로 저장
		계층형 sql로 답글이 바로 밑에 나오게 처리가 가능
			SELECT *
			FROM board
			START WITH refno=0
			CONNECT BY PRIOR NO=refno
			ORDER siblings BY NO DESC;
			
			SELECT *
			FROM board
			START WITH refno=0 : 계층적 sql의 최상위 조건을 선언
			CONNECT BY PRIOR NO=refno : 테이블 안에 컬럼끼리 연관관계(상/하위)를 선언
			ORDER siblings BY NO DESC : 최근에 등록된 내용을 상위로 하여 desc 처리
			해당하는 타이틀 내용은 왼쪽 정렬 처리
				<td style="text-align:left">
	4) 데이터 리스트 처리
		- no 번호를 1번부터 카운트 리스트 되게 처리
			rownum 활용
		- 답글에 대한 간격처리 : level
			sql, vo 속성추가, 화면단
			
# 게시물의 페이징 처리
1. 한 화면에 나타날 데이터를 선택해서 처리하여, DB 서버 부하를 줄여주고, 전체 데이터에 대한 효과적인 접근을 처리를 목적으로 한다.
2. 데이터를 범위를 지정하여 전달해주고, 이것을 페이징이라는 인터페이스로 처리해주기 때문에 효과적으로 활용할 수 있다.
3. 아래 sql과 같이 시작번호와 마지막 번호를 통해서 특정한 페이지의 데이터를 보여주는 처리를 할 수 있다.
	SELECT *
	FROM (
		SELECT rownum cnt, LEVEL, b.*
		FROM board b
		START WITH refno=0
		CONNECT BY PRIOR NO=refno
		ORDER siblings BY NO DESC
	)
	WHERE cnt BETWEEN 6 AND 10;
		==> 만약 한번에 보여줄 데이터 건수가 5개이고, 두번째 페이지를 클릭할 때 처리할 sql
4. 이를 위해, 리스트하는 VO(Board)와 페이지 처리 및 검색을 위한 VO(BoardSch)를 따로 만들어 활용한다.

# 핵심 프로세스
1. 한 화면에 선택한 페이지건수와 검색한 키워드에 따라서, 데이터를 출력된다.
2. 하단에 한 페이지로 나타나지 못하는 데이터는 페이지 번호를 하단에 두어, 해당 페이지 번호를 클릭했을 시, 데이터를 출력하여 처리한다.
3. 비지니스(service단 처리) - 특정한 페이지의 start와 end를 DB에 넘겨서 처리
	1) 우선 전체 데이터 건수를 가져온다. (DB-dao)
	2) 한번에 보여질 데이터 건수(화면에서 요청값 - select -3/5/10/20/30)
	3) 전체 페이지 수(전체데이터건수/한번에 보여질 데이터 건수)
		[1][2] .... [총페이지수]
	4) 클릭한 현재 페이지 번호(화면에 요청값 - hidden)
	5) 클릭한 현재 페이지 번호*한번에 보여질 데이터 건수
		시작번호
		마지막번호
	6) 한번에 보여질 하단의 데이터 리스트 블럭 수
		[1][2][3][4][] .... : 너무 많이 페이지 번호를 리스트할 수 없다.
		==>
		<<[1][2][3][4][5]>>
		<<[6][7][8][9][10]>>
	7) 시작 블럭의 번호, 마지막 블럭의 번호
	8) 양옆에 잇는 화살표를 클릭시, 다음 블럭으로 이동 처리
	
# 개발 순서
1. VO(검색할 BoardSch)
	전체건수, 페이지건수, 현재 페이지번호, 시작번호, 마지막번호, 블럭 크기, 시작블럭, 마지막블럭, 검색(작성자, 제목)
	공통 mybatis vo 등록
2. 요청값 처리 부분에 BoardSch(boardSch) 부분 설정
	1) dao : public List<Board> getBoardList(BoardSch sch);
		mapper
		mybatis_Spring.xml
	2) service
	3) controller 검색 list 관련 내용 변경
	4) view
		\views\a01_boardList.jsp
		${boardSch.title}
		${boardSch.writer}
3. mapper부분 sql처리 시작번호/마지막번호
	BoardService.java
	    public List<Board> getBoardList(BoardSch sch) {
			sch.setStart(1);
			sch.setEnd(5);
	BoardMapper.xml
			select *
			from (
				select rownum cnt, level, b.* 
	            ...
	            ..
	  			ORDER siblings BY NO desc )
			where cnt between #{start} and #{end}
	a01_boardList.jsp
	    <form id="frm01" class="form-inline" action="${path}/board.do?method=list"  
4. 전체 검색데이터 가져오는 dao/mapper 작성
	sql
		select count(*)
		from board
		where title like '%'||''||'%'
		and writer like '%'||''||'%'
	dao/mapper
		public int totCnt(BoardSch sch);
5. service단에서 단계별로 데이터 처리 내용
6. 화면단 구현
	0) dao 호출해서 총건수 설정(BoardSch)
	1) 한번에 보일 페이지 건수 선택 : select
	2) 클릭시, 현재 페이지 번호를 curPage hidden 속성을 설정 함수 선언
	3) 하단에 반복문을 통한 paging 범위로 리스트 처리
	4) 전체 블럭범위에 따라 시작 블럭과 마지막 블럭을 선언
		<< >> : 화살표 형식으로 블럭이동 처리
		
# 하단에 특정한 페이지 번호 클릭시, 해당 페이지 데이터 로딩하기
1. 개발 순서
	1) 페이지번호 클릭, 함수 선언 및 hidden으로 curPage를 설정 및 submit() 처리
		<input type="hidden" name="curPage" value="1"/>
		function goPage(no)
			$("[name=curPage]").val(no);	$("#frm01").submit();
		<a class="page-link" href="javascript:goPage(${cnt})">
	2) service단 처리
		현재 클릭한 페이지 번호, getCurPage()와 getPageSize()를 통해,
		DB sql에 전달할 최종 start(시작번호), end(마지막번호)를 전송한다.
		
		마지막번호 : 현재클릭한 페이지번호 * 페이지당 보일 데이터 건수
			sch.setEnd(sch.getCurPage()*sch.getPageSize())
		시작번호 : 
			sch.setStart((sch.getCurpage()-1)*sch.getPageSize()+1)
			현재페이지	페이지당건수	시작번호	마지막번호
			1			5				1			5
			2			5				6			10
			3			5				11			15
			4			5				16			20

# 페이지 블럭
1. 페이지 수가 많을 때, 한번에 나올 수 있는 페이지 수를 지정해서 [이전][이후]를 활용하여 하단에 페이지도 효과적으로 처리할 수 있다.
2. 주요 개념
	1) 기본 페이지 블럭의 갯수 지정
		[1][2][3] : 3개
		[1][2][3][4][5] : 5개
		[1][2][3][4][5][6][7] : 7개
		보통 홀수로 한번에 출력할 페이지의 블럭의 갯수를 지정한다.
	2) 현재 페이지 블럭 번호
		[이전][이후] 링크를 통해 이동할 때, 두번째 블럭의 경우
		[이전][4][5][6][이후]로 표현되고, 나오는 페이지 번호는 4~6정도가 된다.
	3) 블럭별 시작 페이지 번호와 마지막 페이지 번호
		이전 이후를 통해 이동할 때, 나타나는 시작 페이지 번호와 마지막 페이지 번호를 설정하여야 화면단에서 반복의 시작과 마지막을 지정할 수 있다.
		위 경우 [4]가 시작페이지 번호, [6]이 마지막 번호이다.
		- 마지막 페이지 번호 : 현재 블럭 번호*블럭의 크기
			마지막 페이지 번호는 총페이지 수와 같아야 한다.
		- 시작 페이지 번호 : (현재 블럭 번호-1)*블럭의 크기+1

# 조회수 카운트업
0. 변경파일

1. 처리 프로세스
	리스트 화면에서 해당 데이터 클릭시 조회수가 증가되어 처리되게 한다.
2. 개발 순서
	1) sql 작성
		update board
		set readcnt = readcnt+1
		where no = #{no}
	2) dao/mapper
		public void updateReadCnt(int no);
	3) service
		상세화면 호출시 처리