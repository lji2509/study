# 웹 프로젝트 진행에 대한 이해
1. 실무 프로젝트 진행 순서
	1) 프로젝트 수주
	2) 요구사항 분석
		- RFQ(고객사의 요청 내용문서)를 기반으로 실제 구현할 내용을 작성
		- 요청사항이 현실적으로 시스템이 구현가능 여부를 확인하고 기능 내용을 기술
	3) 설계
		- 화면 설계 : 구현할 내용에 대한 구체적인 화면 UI(user interface)를 확정
			진행 내용에 따른 내용 기술
		- database 설계 : 사용될 데이터를 확인하여, 저장할 데이터의 기본 틀을 만들어 스키마 도출, 논리 테이블 도출, 연관관계 도출, 물리 테이블로 생성
		- application 설계 : uml(유즈케이스 다이어그램, 클래스 다이어그램), 프로우 차트 작성
	4) 구현
		- front end 구현
			화면설계를 기준으로 html/css/js를 통해 브라우저를 통해 나타날 화면 내용을 구현
		- back end 구현
			화면설계와 database 설계 및 생성된 내용을 기준으로 java, jsp, 프레임워크를 통해서 서버단(WAS)에서 처리할 내용을 구현
	5) 테스트
		- 개발자가 개인적으로 테스트하고,
		- 주단위로 팀원들과 함께 단위테스트와 코드리뷰를 통해 효과적으로 코딩 내용을 확인한다.
		- 통합테스트 프로젝트를 전체적으로 진행내용을 통합해서 테스트하여 문제 및 결함을 확인한다.
		- 인수테스트는 최종적으로 고객에게 인수하기 전에 테스트하여, 에러 및 결함을 고객으로부터 받아서 바로 반영하여 최종적으로 완료를 위한 테스트를 한다.
	6) 프로젝트 종료
	
2. 각 프로젝트 단계별 주요 기술
	1) 요구사항 분석 : 요구사항 내용에 대한 분석 단계 처리, 문서작업, 프로젝트 개발을 위한 고객과 대화, 기존에 있는 산출물 양식들에 대한 분석
	2) 화면 설계 : 요구사항 기반으로 실제로 구현할 화면단의 내용을 처리하며 기본적인 화면 배치나 화면에 사용될 요소들을 생각하여 프로우에 맞게 작성
	3) database 설계 : 요구사항기반으로 사용할 데이터 도출, 스키마 도출, ERD 사용하여 관계도 설정
	4) application 설계 : 프로그래밍의 단계에 처리할 내용을 순서도로 만드고, 이에 기반하여 단계별로 usecase 다이어그램, 클래스 다이어그램 등을 작성한다.
	5) front end 구현 : html, css, js를 통해서 브라우저를 통해 로딩한 최종화면에 대한 내용을 구현한다.
		backend단에서 전달한 데이터가 있다는 가정하에 화면을 구현한다.
	6) back end 구현 : database에 대한 sql 작성 능력을 기반으로 하여 연동하여 처리하는 DAO를 작성하고, 요청값과 결과값을 최종 화면구현을 front end와 연결하여 처리한다.
		이 때, ajax를 통한 비동기처리를 하기도 하고, MVC(모델2) 패턴을 이용하기도 하고, 프레임워크 등을 사용하기도 한다.
	7) 테스트 : 작성된 내용을 기준으로 테스트 시나리오를 만들어 수행하여 bug나 오류를 최대한 빠르게 반영하여 처리한다.
	
3. 프로젝트형 학습 진행 방법
	- 프로젝트는 앞단계의 누적해서 진행한다.
		요구사항 분석 ==> 요구사항분석+화면설계 ==> 요구사항분석+화면설계+sql작성 ==> 요구사항분석+화면설계+sql작성+프런트화면구현
	1) 요구사항 분석
		- 기존 시스템의 기능 확인 및 분석
			cf) 쇼핑몰 등 여러가지 관심 있는 사이트를 접속해서 로그인해서 해당 내용을 분석(장/단점 분석)
			- 로그인 기능 : 아이디와 패스워드를 입력하여 회원이 등록되어 있으면 메인화면으로 이동된다.
			- 회원 가입 : 로그인시 등록된 아이디가 없으면 회원 가입으로 처리된다.
			- 물건 검색 : 물건명이나 가격의 정렬 순서로 검색을 할 수 있다.
			- 물건 상세 화면 이동 : 상세 화면으로 이동하면 물건 정보(물건명, 가격, 물건 이미지, 옵션..)
			# 사이트의 보완/발전 사항
			- 구매 물품의 장바구니 처리에 프로세스가 반복적으로 입력되는 부분이 있어서 개선이 필요하다.
		- 제시된 요구사항정의서와 프로우 양식에 의한 요구사항 분석
	2) 화면설계서 작성
		- 화면 설계서 작성 내용 진행
		- 기본 시스템의 내용을 분석하여 화면 설계서와 필요한 자료 만들어보기
		- 새로운 기능 사이트를 구성하여 요구사항과 화면 설계서를 작성
	3) database sql 작성과 설계
		- 각 화면별로 필요한 테이블과 sql 작성
		 - 데이터베이스의 ERD 설계
	4) 화면 구현
		- 화면 설계와 database를 기준으로 html/css/javascript를 기준으로 front화면을 구현한다.
			(DB연동이 안되고 있다는 가정하에 프런트 단 화면 구현)
		- database 연동하는 DAO 처리를 jsp과목에 배운 후, backend 처리도 할 수 있게 구현
			(DB 연동해서 처리)
			모델 1
		- MVC 패턴에 의한 화면 구현 : 모델 2
	5) 프레임워크를 통한 화면 구현
		- 스프링 프레임워크 1단계로 프로젝트 진행
		- 스프링 부트와 vue를 연동한 2단계 프로젝트 진행
	6) 최종 통합 프로젝트 진행
		- AWS 연동 프로젝트 진행
		
# 요구사항과 요구분석 명세서의 이해
	1) 소프트웨어 개발의 목적
		- 개발된 소프트웨어의 고객 만족
	2) 고객 만족을 위한 특성
		- 적시성(time to market) : 빠른 출시를 통한 시장의 점유
		- 유연성(flexibility) : 다양한 환경에서의 적응성
		- 통합(integration) : 기존 시스템과의 쉬운 통합
	3) 고개만족의 개발조건
		- 고품질의 제품개발
		- 정해진 기간내의 개발
		- 주어진 예산내의 개발

# 요구사항/요구 분석 명세서
	1) 요구사항
		- 이용자가 어떤 문제를 풀거나 목표를 달성하기 위해 필요한 조건이나 능력(사전적 의미)
		- 사용자와 개발자 간에 합의한 개발 범위에서 시스템이 제공해야 하는 기능(SW개발 의미)
	2) 요구 분석 명세서
		- 개발 초기에 사용자의 요구사항(비기능 요구사항 포함)을 추출하여 정리한 문서
		- what에만 초점, how는 고려하지 않음
		
# 요구분석
	1) 요구 분석 과정
		사용자 요구 파악 -> SW 목표 수립 -> 모델링 -> 요구 분석 명세서
	2) 요구 분석
		현 상태 파악 -> 사용자 요구 파악 -> 사용자 요구 결정
		- 소프트웨어 요구사항 정의를 위해 사용자의 요구사항을 조사하고 확인하는 과정
		- 소프트웨어 개발 생명주기의 첫 단계
		- 소프트웨어 개발 성패의 열쇠

# 요구분석의 어려움
	1) 의사소통의 문제
		- 견본이 없어 요구사항 설명이 어려움
		- 사용자가 요구사항에 대한 설명 방법을 잘 모름
			-> 사용자 의사 전달 능력이 요구사항 전달 내용에 영향을 미침
			-> 일관성이 없거나 불안전한 요구 분석 명세서
	2) 계속 변하는 요구사항
		- 초기의 요구사항은 단순
		- 개발될 SW에 대해 이해의 폭이 넓어짐에 따라 새로운 요구 사항 발생 및 증가
		- 관련 지식의 증가로 인한 요구사항 변경 발생
			-> 요구사항간의 충돌, 일관성 결여 및 불일치 발생
	3) 변경 요구에 대한 대처 방안
		- 변경사항에 대한 날짜별, 기간별 기록
		- 변경이 미치는 영향에 대해 사전 분석 필요
	4) 애매모호한 요구 사항
		- 해석을 달리할 수 있는 애매한 표현의 요구
		- 사용자의 일관성 없는 요구
		- 부서간의 상충된 요구
		- 경영진과 실무자간의 상반된 요구
	5) 분석가의 역할
		- 수집된 요구들을 반영하기 전에 이해 당사자들 간의 주장을 조율할 수 있어야 함
	6) 사용자와 개발자의 마찰
		- 최적의 분석명세서에 대한 사용자의 다른 해석으로 인한 마찰
		
# 필수기재사항
	1) ID : 내부 규칙에 따라 식별자를 부여한다. 하나의 요구사항에 하나의 식별자이다.
	2) 화면명 : 어느 화면에서 구현할 기능인지 기재한다. 화면에 속하지 않는 요구사항도 있을 수 있다.
	3) 요구사항명 : 요구사항의 설명을 요약하여 기재한다.
	4) 내용 : 요구사항의 상세한 내용을 기재한다.
	5) 중요도 : 상중하, 1~5 등 내부 규칙에 따라 부여한다.
	6) 부서/작성자 : 요구사항을 기재한 담당자를 기재한다. 부서가 없는 경우 생략해도 무방하다.
	7) 날짜 : 요구사항을 기재한 날짜를 명시한다.
	8) 진행사항(구현여부) : 검토예정, 진행확정, 진행불가, 추후진행 등 내부에서 결정된 사항을 기재한다. 진행불가이거나 추후 진행일 경우 이유를 같이 적는 것이 좋다.
	9) 버전명 : 요구사항이 변경될 수 있으므로 버전(혹은 다른 방식)으로 표기하여 타인이 알 수 있게 해야한다.
	10) 그 외 : 유형(기능, 비기능, 제약사항, 인터페이스, 기타 등등), 출처(관려자 이름, 11/15회의, 사업계획서 등)
	
# 요구사항 작성 지침
	- 요구사항 명세서를 읽는 작업자(개발자, 디자이너 등)가 이해하기 쉬워야한다.
	- 무엇을 어떻게 구현되어야 하는지 명확하게 작성한다.
	- 하나의 요구사항에 여러가지(복수) 요구사항을 작성하지 않는다.
	- 다른 요구사항 모순 또는 중복되지 않게 한다.
	- 애매한 단어를 사용하지 않고 명확하게 기재한다. (~ 있으면 좋겠다 -> ~ 기능 필요) 오해하지 말아야 할 것이 명령하는 것이 아니고 의견을 모호하게 하지 말고 명확하게 표현하라는 의미이다.