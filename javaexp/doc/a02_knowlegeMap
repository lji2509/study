#자바의 지식체계
1. 초기 핵심적/기초부터 시작해서, 점점 확대해 가는 방식으로 수업 진행
	- 계열화된 내용을 조금씩 살을 붙여가면서 내용을 설명하고 실습예제 진행
 	- 1주일에 한번 전체 내용 살펴보기, 진도에 따른 기본 코드
 	
 	개념이해 ==> 기본코드 ==> 응용코드 ==> 실무활용
 	
2. java프로그램 설치
	jdk
	eclipse
	프로젝트 만들기
	#백업 : file - import - General - Existing Projects into Workspace
	
3. java에 대한 이해
	1) java의 특징
		- platform 독립적 : 운영체제 상관없이 실행가능
		- 객체지향적인 프로그램
		- 메모리관리 자동적으로 해줌(jvm)
	2) 실행과정
		- java ==> .class ==> 실행결과
		- 코드 작성 @@@.java
		- 컴파일 : java @@@.java ==> @@@.class
			이클립스에서는 저장을 하면 해당 클래스로 binary 파일이 만들어진다.
		- 실행 : main() 메서드를 포함하는 클래스이어야 한다.
			java @@@ : @@@.class 파일을 실행 처리
			main(){} 블럭 수행 처리
				jvm의 메모리에 로딩하여 처리
		- C:\a01_javaexp\workspace\javaexp\build\classes
			폴더에 컴파일된 파일을 저장하고 있다.
		- C:\a01_javaexp\workspace\javaexp\scr
			프로그래밍 파일인 클래스들이 존재
			
	3) 기본입력과 출력
		System.out.println("출력할문자열-줄바꿈포함");
		System.out.println("문자열"+"문자열"); // 문자열 이어서 출력
		System.out.println(); //줄바꿈없이 처리
		\n(줄바꿈처리), \t(탭간격)
		\(역슬래쉬) : 특수문자에 대한 기능 처리
		Scanner sc = new Scanner(System.in);
		Scanner : console을 통해 입력하는 내용을 처리해줄 수 있는 자바내부의 api 객체
		new Scanner(System.in) : 객체를 생성
		System.in : 기본적인 입력을 처리하는 Stream 객체를 생성자의 매개변수로 받아들인다.
		
4. 에러잡기
	1) main()에서 수행 : class 만들 때 main메서드 check 
	2. 명령어는 대소문자 구분
	3) 클래스명 / 객체는 대문자 : 가독성을 위해서 객체지향적인 프로그램에서 많이 사용
		대문자로 시작 : 클래스명, 객체명
			ex) class Person{}
				Person p;
				String str;
		소문자로 시작 : 변수명, 참조변수, primitive data 타입(기본 데이터유형)
	4) 마지막 명령어 끝에는 ;(세미콜론)
		- 선언할 때는 중괄호 블럭을 사용하여 세미콜론을 쓰면 안된다.
			Person(String name); {} (x)
			void call();{} (x) ==> void call() {}			
		- 호출시에 ; 사용
			Person p = new Person("홍길동");
	5) 코드는 {}(중괄호) 단위로 계층적으로 코딩, 시작과 끝에 주의
		특히, 탭간격 활용
		- 괄호는 시작/끝 먼저 만들고, 필요에 따라 사이에 커서를 위치시킨 후에 enter키로 입력하여 코드 처리
		ex) 프로그램에서 사용되는 괄호는 가능한한 먼저 시작과 끝을 만들고, 중간에 삽입하는 형식으로 진행
		() : 소괄호, 매개변수를 입력처리할 때 활용
		Person(String name) {
		
		}
		{} : 중괄호, 클래스명/생성자/메서드에 범위를 지정하고, 조건/반복문에서 주로 활용
			int[] array = {1000,2000,3000}; //자바에서만 데이터 선언할 시 중괄호 이용
			cf) var array = [1000,2000,3000];		
		[] : 대괄호, 주로 배열에서 호출할 때 사용
			array[10] = 500;
		- 클래스/메서드/생성자/조건/반복문에서 사용할 때, 계층을 탭간격을 구분하여 사용하는 것이 가독성이 좋고, 에러를 찾기 쉽다.
			class Person {
				//종속된 구성 요소들은 탭간격으로 계층 하위라는 것을 표시
				int age;
				String name;
				void call() {
					//하위에 종속된 내용도 탭간격으로 종속 표시
					age = 25;
					if(age>=20) {
						//조건문에도 종속 표시
						System.out.println("성인");
					}
				}
			}	
	6) 변수를 중복 선언 사용시 에러발생
		선언 : 데이터유형을 지정하여 변수를 기술했을 때 선언이라고 한다. 
		앞에 데이터 유형을 지정하지 않으면 기존의 변수에 재할당이어서 다시 코드를 기술하여도 무방
		- 코드가 길어져서 선언된 변수인지 모르고 다시 선언하는 경우
			duplicate local variales
	7) 빨간색에 커서 위치시켜 에러 내용 확인
		컴파일 전에 반드시 왼쪽에 에러가 없는 것을 확인
		
5. 변수와 타입
	1) 변수의 선언과 할당
		//숫자형
		int num01;
		num01 = 25;
		//문자열은 객체이면 객체형데이터는 대문자로 시작한다.
		String name = "홍길동";
	2) 데이터 타입
		기본데이터 유형(primitive data type)
			정수형 : byte, short, int, long, char(문자)
				int <==> char : 문자는 unicode값으로 연결되어,0
				데이터유형 변환에 의해서 해당 문자 또는 코드값인 정수데이터를 확인할 수 있다.
				데이터 유형이 캐스팅에 의해 변환되어 해당 데이터로 표현할 수 있다.
			실수형 : float, double
				소숫점이하 데이터까지 할당하여 처리할 수 있다.
			boolean : true / false
		객체형유형
			배열형
			내장된 api객체
			사용자정의 객체
		
	3) 타입의 변경
		작은 데이터 유형 ==> 큰 데이터 유형
			int num1 = 25;
			double num2 = num1;
			25.0이라는 데이터가 num2에 할당되어 있다, promote라고 한다.
		큰 데이터 유형 ==> 작은 데이터 유형
			double num3 = 35.7;
			int num4 = num3;	(X) 에러 발생
			캐스팅 필요. 특정한 데이터 유형 강제 변환 처리
			int num5 = (int)num3;
			num5는 35로 할당 
		숫자 ==> 문자열
		문자열 ==> 숫자			
			"25" + "30" ==> "2530"
			Integer.parseInt("25") + Integer.parseInt("30")
				25 + 30 ==> 55
		
6. 연산자
	1) 연산자와 연산식
		산술연사자 : 데이터를 사칙연산자에 의해 연산 처리하는 것
			+ = * / % 가 주로 사용
			25 + 30 = 55
			25 * 3 = 75
			10 / 3 = 3 : 해당 데이터의 정수형 몫
			10 % 3 = 1 : 해당 데이터의 정수형 나머지
			결과값이 실수를 필요로 할 때는 피연산자(연산이 되는 데이터)가 실수로 형변환을 하거나 해당 데이터 유형이어야 한다.
				10/(double)3 = 3.3333
				10/3.0 = 3.3333
		대입연산자 : = 기호를 이용하여 오른쪽에서 왼쪽으로 데이터 할당
			int num5 = 25;
			int tot = kor + eng + math;
		증감연산자
			num5++; 데이터가 1씩 증가
			num5--; 데이터가 1씩 감소
			증감대입연산자 : 2개씩 이상 증가할 때 활용
				num5 = num5 + 2	==>	num5 += 2;
		비교연산자
			>= <= > < == !=
			특정한 데이터를 비교연산자를 이용해서 boolean값을 결과로 처리
			boolean isPass = num5>=5;
		논리연산자
			비교연산식을 연속해서 논리값을 처리할 때 활용
			&&(and) : 두개의 비교연산식이 둘다 true일 때 true, 그 외는 false
				age>=14 && age<=18
			||(or) : 두개의 비교연산식이 둘다 false일 때 false, 그 외는 true
				age<5 || age>=65
	2) 연산자의 우선순위
		소괄호(연산자)가 최우선, *//(곱셈과 나눗셈), +-(덧셈과 뺄셈)
			
7. 조건문과 반복문
	1) 코드 흐름제어
	2) 조건문
		if(조건) {
		
		}
	3) 반복문
		for(초기값; 반복조건; 증감연산자) {
		}
	4) continue / break;
		continue : if문과 함께 반복처리시 해당 step 이후로 처리를 하지 않고, 다음 반복단계를 수행 처리
		break : 반복문을 완전히 종료 처리
		
8. 메모리사용
	1) stack영역과 heap영역에 대한 이해
		cf) 도서관에서 책을 찾을 때 효과적인 방법
			찾는 단말기를 이용해서 해당 도서가 있는 위치를 호출
		stack영역 : 작은 메모리 
			- 크기가 고정되어 있는 데이터 유형이나, 객체의 경우 heap영역이 주소값
			ex) int num1 = 25; //기본데이터 유형은 바로 stack 영역에 할당
				 Person p1 = new Person() //객체 유형데이터만 stack과 heap영역 분리
		heap영역 : 객체가 할당할 수 있는 큰 메모리 영역 
			- 배열이나 객체형태로 크기가 커질 수 있는 데이터유형이나 실제 저장되는곳
	2) 기본데이터 유형(byte, short, int, long, float, double, char, boolean)
		stack영역 선언과 할당
	3) 객체 유형	
		stack영역에 객체의 heap영역의 주소
		heap영역은 실제 객체가 할당
	4) 배열
		배열의 선언
			데이터유형[] 배열명;
			ex) int[] array;
		배열의 객체 생성
			배열명 = new 데이터유형[배열크기];
			ex) array = new int[3];
		배열의 데이터 할당
			배열은 index단위로 데이터를 할당할 수 있다.
			array[0] = 25;
			array[1] = 30;
			array[2] = 5;
	
9. 클래스
	1) 클래스와 객체와의 관계
		실제 객체 지향적인 자바 프로그램은 근간되는 Object를 만들기 위한 설계도 역할
		객체지향 프로그램을 쓰는 이유?
			기억/판단/행동
			object 지향적인 프로그램에서 핵심적인 구성요소
			기억(메모리) : 필드
			판단/행동 : 메소드
			위에 있는 객체를 설계도를 만들어서 객체를 생성하는 기준을 설정하는 코드 ==> 클래스	
		ex) 63빌딩 도면
			도면 서울에서 건물
			도면 부산에서 건물
			도면역할 ==> 클래스
			실제건물 ==> 객체
		클래스는 소스코드 그 자체로는 binary파일(기계언어)까지만 만들어진다.
		실행을 하려면 main()메소드가 있는 곳에서 호출하여야 한다.
		클래스를 통해 생성자로 만들어진 것을 객체라고 한다.	
	2) 클래스 구성요소
		- 저장하는 데이터를 할당하는 곳 : 필드
		- 외부에 있는 데이터를 입력받거나 특정한 기능 처리 : 생성자, 메소드
			생성자 : 클래스명과 동일하며 외부의 데이터를 필드에 할당하는 역할
			main()
				Person p1 = new Person("홍길동");
				System.out.println("이름 : " + p1.name);
			
			class Person {
				String name;
				
				Person(String name) {
					this.name = name; //this는 입력받는 변수와 구분하기 위해 사용
					}
					String getName(int age) {
						if(age>=20) {
							"성인 : " + name;
						} else {
							"미성년 : " + name;
						}
						return name;
					}
				}
				Person p01 = new Person("홍길동");
				String name = p01.get(25); // "성인 : 홍길동"이 메서드를 통해 전달되고 그것을 name에 할당
								
			메서드 : 외부에 데이터를 입력 받아 기능적인 처리
				- 리턴유형 : 마지막에 리턴할 데이터 유형
				- 매개변수 : 실제 호출되었을 때 전달할 데이터 유형 선언
				- 프로세스 처리 : 조건문, 할당처리 등
				- 실제리턴값 : 해당 메서드가 호출된 곳에 전달할 데이터
			메서드와 생성자 오버로딩 개념
	3) static과 final
		static : 객체들을 공유 메모리 영역
		final : 클래스명 앞에, 필드명 앞에, 메서드명 앞에
			필드명 : 변수를 상수화한다. - 한 번 할당 후에 변경하지 못하게 처리
			클래스명 앞에는 상속을 처리할 수 없게 선언
			메서드명 앞에는 재정의가 불가능하게 처리
		ex) 도면의 가격(static변수)은 이 도면으로 만들어지는 모든 건물에 영향을 미친다.
	4) 접근제어자 : 클래스 구성요소에 대한 접근을 제한되게 처리할 수 있는 제어자
		private, default(기본), protected, public
		encapsulation : 객체에 구성요소에 접근제한을 두어, 외부의 호출에 대하여 접근을 제한하는 oop(객체지향프로그래밍)의 핵심 개념 중 하나

10. 상속
	1) 기본상속
		객체를 상속관계로 설정해서 사용할 것을 말한다.
		class Father {
			String name;
			int height=170;
			
			String getName() {
				return name;
			}
		}
		class Son extends Father {
			int weight=70;
		}
		main()
		Son s1 = new Son();
		s1.height;
		s1.getName();
		s1.weight;
	2) 메소드 재정의(오버라이딩)
		상위에 선언한 메서드를 다시 정의하여 사용하는 것
	3) 다형성
		상위 클래스의 내용을 여러가지 형태로 다양하게 만들어지게 하는 것
		Zerg
			Larba l1 = new Dron();
			Larba l2 = new Zerggling();
	4) 추상 클래스
		추상적인 메서드가 정의되었을 때 사용되는 클래스
		추상메서드와 일반메서드가 공존
	5) 인터페이스
	
=== 기초 완료/api에 있는 내용 활용 ===	
	
11. 예외처리	
	1) 프로그래밍에서 실행에러 발생시, 정상적으로 수행이 될 수 있게 예외를 대비하여 코딩
	try {
		예외가 발생할만한 코드	
	} catch(Exception e) {
		예외가 나왔을 때 처리할 내용
	}
12. 기본 api 클래스
	1) 자바의 api 도규먼트
	2) String (문자열)
		equals, concat, replace()
	3) Wrapper 클래스
		기본 데이터유형을 변형하여 기능적인 처리가 필요할 때 객체화해서 메서드를 사용하게 하는 것
		byte ==> Byte
		int ==> Integer
			ex) Integer.parseInt("25") ==> 문자를 숫자로
	4) Math 수학적 함수처리
		random() : 
	
13. 쓰레드
	한번에 여러가지 요청을 처리하는 프로그램
	하나의 프로그램에서 여러 개의 처리가 한번에 가능

14. 제너릭
	자바는 Object가 최상위 클래스, 다양한 객체를 받을 수 있는데, 이것을 특정객체로 고정하여 처리하는 방법
	ArrayList
	
15. 람다식

16. 컬렉션 프레임워크
	List : 선형 리스트형 커렉션 프레임워크
		- 동적인 배열을 지원하는 객체
	Set : 중복불가 순서지키지 못하는 컬렉션 프레임워크
	Map : key/value형 프레임워크	

17. 스트림
	데이터의 입출력을 처리하는 객체

18. 알고리즘
	1) 조건에 따른 알고리즘
	2) 최대/최소값
	3) 정렬처리

# 객체를 사용 및 처리하기 위한 지식 계열화
1. 기본 데이터 유형에 대한 선언과 할당을 할 수 있는가?
2. 변수를 사용했을 때, 나오는 에러의 유형을 알고 있는가?
3. 기본 데이터유형과 객체형 데이터유형을 구분할 수 있는가?
4. 클래스와 객체의 차이점을 알고 있는가?
5. 기능 메서드의 구성요소별로 기능을 알고, 실제 여러가지 경우에 코드를 할 수 있는가?
	1) 리턴값
	2) 매개변수
	3) 프로세스 처리 : 저장, 출력, 경우에 따른 조건/반복문 처리
6. 클래스 각 구성요소를 이해하고 사용할 수 있는가?
	1) 필드
	2) 생성자
	3) 메서드
	4) 각 구성요소들의 복합적 활용
7. 클래스에 선언된 staitc 변수와 일반변수의 차이점을 이해하고 사용할 수 있는가?
8. 객체와 객체의 연관관계의 설정을 활용할 수 있는가?
	1) 1:1 객체
	2) 1:다 객체
9. 상속의 개념을 이해하고 활용할 수 있는가?